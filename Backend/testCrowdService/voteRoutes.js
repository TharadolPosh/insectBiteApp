const express = require('express');
const { Pool } = require('pg');
const router = express.Router();

const pool = new Pool({
    user: process.env.DB_USER || "usercs",
    host: process.env.DB_HOST || "localhost",
    database: process.env.DB_NAME || "InsectPlatformDB",
    password: process.env.DB_PASSWORD || "password",
    port: process.env.DB_PORT || 5432,
});

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏ß‡∏ï
router.post('/vote', async (req, res) => {
    const { image_id, user_fingerprint, chosen_insect, user_comment } = req.body;
    
    console.log("üì© Data received:", req.body); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤

    try {
        if (!image_id || !user_fingerprint || !chosen_insect) {
            return res.status(400).json({ message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
        }

        const existingVote = await pool.query(
            `SELECT * FROM crowdsourcing_votes WHERE image_id = $1 AND user_fingerprint = $2`,
            [image_id, user_fingerprint]
        );

        if (existingVote.rows.length > 0) {
            return res.status(400).json({ message: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏ß‡∏ï‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß" });
        }

        await pool.query(
            `INSERT INTO crowdsourcing_votes (image_id, user_fingerprint, chosen_insect, user_comment) 
             VALUES ($1, $2, $3, $4)`,
            [image_id, user_fingerprint, chosen_insect, user_comment]
        );

        res.json({ message: "‡πÇ‡∏´‡∏ß‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    } catch (error) {
        console.error('‚ùå Error saving vote:', error);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
    }
});


// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏ß‡∏ï
router.get('/analysis', async (req, res) => {
    const { fingerprint } = req.query;

    try {
        const result = await pool.query(
            `SELECT ui.id AS upload_id, ui.image_url, 
                    ca.insect_type, ca.avg_confidence
             FROM upload_image ui
             LEFT JOIN crowdsourcing_votes cv 
             ON ui.id = cv.image_id AND cv.user_fingerprint = $1
             LEFT JOIN classification_analysis ca 
             ON ui.id = ca.upload_id
             WHERE cv.image_id IS NULL`,
            [fingerprint]
        );

        res.json(result.rows);
    } catch (error) {
        console.error('‚ùå Error fetching analysis data:', error);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
    }
});

module.exports = router;
